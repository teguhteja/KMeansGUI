/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ttm.cluster.main;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.geom.Point2D;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Random;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author palgunadi
 */
public class JFMain extends javax.swing.JFrame {

    /**
     * Creates new form JFMain
     */
    Graphics g;
    ArrayList<Point2D> arrLPoint;
    final static int D_PIXEL = 10;
    Color[] c;
    int jmlCluster;
    
    
    public JFMain() {
        
        initComponents();
        initVariable();
        initData();
        addList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jP1 = new javax.swing.JPanel();
        jTF1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLi1 = new javax.swing.JList<>();
        jL1 = new javax.swing.JLabel();
        jL2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTA1 = new javax.swing.JTextArea();
        jL3 = new javax.swing.JLabel();
        jTF2 = new javax.swing.JTextField();
        jB1 = new javax.swing.JButton();
        jB2 = new javax.swing.JButton();
        jL4 = new javax.swing.JLabel();
        jTF3 = new javax.swing.JTextField();
        jB3 = new javax.swing.JButton();
        jB4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Example Cluster");
        setAlwaysOnTop(true);
        setPreferredSize(new java.awt.Dimension(720, 640));

        jP1.setBackground(new java.awt.Color(180, 180, 180));
        jP1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jP1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jP1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jP1Layout = new javax.swing.GroupLayout(jP1);
        jP1.setLayout(jP1Layout);
        jP1Layout.setHorizontalGroup(
            jP1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 448, Short.MAX_VALUE)
        );
        jP1Layout.setVerticalGroup(
            jP1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 448, Short.MAX_VALUE)
        );

        jTF1.setColumns(6);
        jTF1.setText("10");

        jScrollPane1.setViewportView(jLi1);

        jL1.setText("Jml Data");

        jL2.setText("List Data");

        jTA1.setColumns(20);
        jTA1.setRows(5);
        jScrollPane2.setViewportView(jTA1);

        jL3.setText("Data");

        jTF2.setColumns(6);
        jTF2.setText("10,10");

        jB1.setText("Random");
        jB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB1ActionPerformed(evt);
            }
        });

        jB2.setText("Add");
        jB2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB2ActionPerformed(evt);
            }
        });

        jL4.setText("Jml Cluster");

        jTF3.setText("2");

        jB3.setText("K-Means");
        jB3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB3ActionPerformed(evt);
            }
        });

        jB4.setText("K-Medoid");
        jB4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jL2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jL1)
                                            .addComponent(jL3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jB1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jB2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(12, 12, 12))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jL4)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jTF3, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jB3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jB4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)))))
                        .addComponent(jP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTF1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jL1)
                            .addComponent(jB1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jL3)
                            .addComponent(jTF2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jB2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jL2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jL4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTF3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jB3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jB4))))
                    .addComponent(jP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB1ActionPerformed
        generateRandomPoint();
        addList();
    }//GEN-LAST:event_jB1ActionPerformed

    private void jB2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB2ActionPerformed
        setPoint();
        setPoint2JPanel();
        addList();
    }//GEN-LAST:event_jB2ActionPerformed

    private void jB3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB3ActionPerformed
        
        jmlCluster = Integer.parseInt(jTF3.getText());           
        int jmlPoint = arrLPoint.size();
        
        if(jmlCluster <= jmlPoint){
            if(jmlCluster > c.length){
                initRandColor();
            }
            
            KMeans kmeans = new KMeans(arrLPoint,jmlCluster);
            kmeans.setIsPrintInfo(false);
            int step = 1;
            String text; 
            while(kmeans.isNotSameMemberInCluster()){
                text = "";
                text = text+"Step-"+step+" : centroid "+Arrays.toString(kmeans.getCentroid())+"\n";
                kmeans.proses();
                coloringPoint(kmeans.getPointC());
                text = text+"Step-"+step+" : warnai point\n";
                text = text+"Step-"+step+" : nilai SSE = "+kmeans.getSse()+"\n";
                jTA1.append(text);
                coloringPointCentroid(kmeans.getCentroid());
                step++;
            }
        }else{
            JOptionPane.showMessageDialog(JFMain.this, 
                    "Jumlah Cluster lebih kecil daripada jumlah point", "Error", 
                    JOptionPane.ERROR_MESSAGE);
        }
        jTA1.append("Proses selesai\n\n");
        
        /* for test cluster
        String text = "";
        text = text+"Step-"+step+" : centroid "+Arrays.toString(kmeans.getCentroid())+"\n";
        kmeans.proses();
        coloringPoint(kmeans.getPointC());
        text = text+"Step-"+step+" : warnai point\n";
        text = text+"Step-"+step+" : nilai SSE = "+kmeans.getSse()+"\n";
        jTA1.append(text);
        step++;
        */
    }//GEN-LAST:event_jB3ActionPerformed
    
    // for test cluster
    //KMeans kmeans;
    //int step = 1;
    private void jB4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB4ActionPerformed
        /* for test cluster
        int jmlCluster = Integer.parseInt(jTF3.getText());     
        kmeans = new KMeans(arrLPoint,jmlCluster);
        kmeans.setIsPrintInfo(true);
        kmeans.setMode(kmeans.MODE_RAND);
        step = 1;
        */
        jmlCluster = Integer.parseInt(jTF3.getText());           
        int jmlPoint = arrLPoint.size();
        
        if(jmlCluster <= jmlPoint){
            if(jmlCluster > c.length){
                initRandColor();
            }
            KMedoid kMedoid = new KMedoid(arrLPoint, jmlCluster);
            kMedoid.setMode(kMedoid.MODE_RAND);
            kMedoid.setIsPrintInfo(false);
            int step = 1;
            String text;
            while(kMedoid.isNotSameMemberInCluster()){
                text = "";
                text = text+"Step-"+step+" : centroid "+Arrays.toString(kMedoid.getCentroid())+"\n";
                kMedoid.proses();
                coloringPoint(kMedoid.getPointC());
                text = text+"Step-"+step+" : warnai point\n";
                text = text+"Step-"+step+" : nilai Cost = "+kMedoid.getCost()+"\n";
                jTA1.append(text);
                coloringPointCentroid(kMedoid.getCentroid());
                step++;
            }
        }else{
            JOptionPane.showMessageDialog(JFMain.this, 
                    "Jumlah Cluster lebih kecil daripada jumlah point", "Error", 
                    JOptionPane.ERROR_MESSAGE);
        }
        jTA1.append("Proses selesai\n\n");
    }//GEN-LAST:event_jB4ActionPerformed

    private void jP1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jP1MouseClicked
        int x = evt.getX();
        int y = evt.getY();
        arrLPoint.add(new Point2D.Double(x, y));
        g.setColor(Color.black);
        setPoint2JPanel();
        addList();
    }//GEN-LAST:event_jP1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new JFMain().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jB1;
    private javax.swing.JButton jB2;
    private javax.swing.JButton jB3;
    private javax.swing.JButton jB4;
    private javax.swing.JLabel jL1;
    private javax.swing.JLabel jL2;
    private javax.swing.JLabel jL3;
    private javax.swing.JLabel jL4;
    private javax.swing.JList<String> jLi1;
    private javax.swing.JPanel jP1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTA1;
    private javax.swing.JTextField jTF1;
    private javax.swing.JTextField jTF2;
    private javax.swing.JTextField jTF3;
    // End of variables declaration//GEN-END:variables

    private void initVariable() {
        g = jP1.getGraphics();
        arrLPoint = new ArrayList<>();
        initColor();
        
    }
    
    private void generateRandomPoint() {
        int iRandom = Integer.valueOf(jTF1.getText());
        Random rand = new Random();
        g.setColor(new Color(180, 180, 180));
        g.fillRect(0, 5, jP1.getWidth()-10, jP1.getHeight()-10);
        g.setColor(Color.BLACK);
        arrLPoint = new ArrayList<>();
        for(int i =0; i < iRandom; i++){
            int x = rand.nextInt(jP1.getWidth()-20);
            int y = rand.nextInt(jP1.getHeight()-30)+10;
            
            Point2D p = new Point2D.Double(x, y);
            arrLPoint.add(p);
            
            g.fillOval(x, y, D_PIXEL, D_PIXEL);
        }
        Collections.sort(arrLPoint, new Point2DCompare());
    }

    private void addList() {
        String[] arrSP = new String[arrLPoint.size()];
        int i = 0;
        for(Point2D p : arrLPoint){
            arrSP[i] = (int)p.getX()+","+(int)p.getY();
            i++;
        }
        jLi1.setListData(arrSP);
    
    }

    private void setPoint() {
        String sKoor = jTF2.getText();
        String[] arrSKoor = sKoor.split(",");
        int x = Integer.parseInt(arrSKoor[0]);
        int y = Integer.parseInt(arrSKoor[1]);
        arrLPoint.add(new Point2D.Double(x, y));
    }

    private void setPoint2JPanel() {
        Point2D p = arrLPoint.get(arrLPoint.size()-1);
        g.fillOval((int)p.getX(), (int)p.getY(), D_PIXEL, D_PIXEL);
    }

    private void coloringPoint(String[] pointC) {
        for (String s : pointC) {
            String[] arrS = s.split(" ");
            String[] xy = arrS[0].split(",");
            int cluster = Integer.valueOf(arrS[1]);
            double x = Double.valueOf(xy[0]);
            double y = Double.valueOf(xy[1]);

            g.setColor(c[cluster]);
            g.fillOval((int) x, (int) y, D_PIXEL, D_PIXEL);
        }
    }
    
    private void coloringPointCentroid(Point2D[] pointCentroid) {
        for (Point2D p : pointCentroid) {
            g.setColor(Color.red);
            g.fillOval((int)p.getX(), (int)p.getY(), D_PIXEL, D_PIXEL);
        }
    }

    private void initData() {
        arrLPoint.add(new Point2D.Double(10, 30));
        arrLPoint.add(new Point2D.Double(30, 30));
        arrLPoint.add(new Point2D.Double(40, 30));
        arrLPoint.add(new Point2D.Double(50, 30));
        arrLPoint.add(new Point2D.Double(10, 20));
        arrLPoint.add(new Point2D.Double(40, 20));
        arrLPoint.add(new Point2D.Double(10, 10));
        arrLPoint.add(new Point2D.Double(20, 10));
        
        Collections.sort(arrLPoint,new Point2DCompare());
    }

    private void initColor() {
        if(jmlCluster < 12){
            c = new Color[]{Color.BLACK, Color.BLUE, Color.CYAN, Color.DARK_GRAY, 
            Color.GRAY,Color.GREEN, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE,
            Color.PINK, Color.RED, Color.WHITE, Color.YELLOW
            };
        } else {
            initRandColor();
            }
        }

    private void initRandColor() {
         Random rand = new Random();
            int cR, cG, cB;
            c = new Color[jmlCluster];
            for(int i=0; i < jmlCluster; i++){
                cR = rand.nextInt(255);
                cG = rand.nextInt(255);
                cB = rand.nextInt(255);
                c[i] = new Color(cR, cG, cB);
            }
    }

    
    class Point2DCompare implements Comparator<Point2D>{

        @Override
        public int compare(Point2D p1, Point2D p2) {
            int ValX = (int) (p1.getX() - p2.getX());
            if(ValX==0){
                return (int) (p1.getY() - p2.getY());
            }else{
                return ValX;
            }
        }
    
    }
}
